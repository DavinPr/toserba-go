name: CI Workflow

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch)'
        required: true
        default: 'patch'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Go version
        run: go version

      - name: Check out code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update -y && sudo apt-get install -y build-essential git-core checkinstall postgresql-client

      - name: Wait for PostgreSQL to be ready
        run: until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done

      - name: Run tests
        run: |
          make copy-config
          make ci

  release-develop:
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git tag | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
          latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Determine new beta tag
        id: new_tag
        run: |
          latest_tag=${{ steps.get_tag.outputs.latest_tag }}
          major=${BASH_REMATCH[1]}
          minor=${BASH_REMATCH[2]}
          patch=${BASH_REMATCH[3]}
          beta=${BASH_REMATCH[4]}
          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)-beta\.([0-9]+)$ ]]; then
            new_tag="v${major}.${minor}.${patch + 1}-beta.$((beta + 1))"
          elif [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            new_tag="v${major}.${minor}.${patch + 1}-beta.1"
          else
            new_tag="v0.0.0-beta.1"
          fi
          echo "New beta tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Create beta tag
        run: |
          new_tag=${{ steps.new_tag.outputs.new_tag }}
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${new_tag}
          git push origin ${new_tag}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Determine new tag
        id: new_tag
        run: |
          latest_tag=${{ steps.get_tag.outputs.latest_tag }}
          release_type=${{ github.event.inputs.release_type }}
          branch=${{ steps.vars.outputs.branch }}
          
          if [[ "$branch" == "develop" ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            beta=${BASH_REMATCH[4]}
            if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)-beta\.([0-9]+)$ ]]; then
              new_tag="v${major}.${minor}.${patch}-beta.$((beta + 1))"
            elif [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              new_tag="v${major}.${minor}.${patch+1}-beta.1"
            else
              new_tag="v0.0.0-beta.1"
            fi
          elif [[ "$branch" == "main" ]]; then
            if [ "$release_type" == "major" ]; then
              if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                major=$((BASH_REMATCH[1] + 1))
                new_tag="v${major}.0.0"
              else
                new_tag="v0.0.0"
              fi
            elif [ "$release_type" == "minor" ]; then
              if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                major=${BASH_REMATCH[1]}
                minor=$((BASH_REMATCH[2] + 1))
                new_tag="v${major}.${minor}.0"
              else
                new_tag="v0.0.0"
              fi
            elif [ "$release_type" == "patch" ]; then
              if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                major=${BASH_REMATCH[1]}
                minor=${BASH_REMATCH[2]}
                patch=$((BASH_REMATCH[3] + 1))
                new_tag="v${major}.${minor}.${patch}"
              else
                new_tag="v0.0.0"
              fi
            else
              echo "Invalid release type specified."
              exit 1
            fi
          else
            echo "No valid branch or tag type specified."
            exit 1
          fi
          
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Create release tag
        run: |
          new_tag=${{ steps.new_tag.outputs.new_tag }}
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${new_tag}
          git push origin ${new_tag}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.new_tag.outputs.new_tag }}
          release_name: Release ${{ steps.new_tag.outputs.new_tag }}
          body: |
            Release ${{ steps.new_tag.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
